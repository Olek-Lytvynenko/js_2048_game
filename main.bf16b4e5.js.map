{"version":3,"sources":["scripts/main.js"],"names":["button","document","querySelector","messageStart","messageLose","messageWin","fieldRows","querySelectorAll","score","fieldSize","gameScore","gameField","cellFilling","emptyField","coordX","coordY","Math","random","emptyCells","forEach","row","rowIndex","cell","columIndex","push","floor","length","render","element","children","textContent","className","innerText","restart","classList","add","move","clickEvent","changed","key","moveLeft","moveRight","moveUp","moveDown","checkWin","win","check","lose","slide","array","size","filterEmpty","filterArrey","filter","item","newArray","i","slideLeft","arr","isChanged","y","oldArr","join","reverse","swap","xCol","yCol","xRow","yRow","temp","rotateField","x","map","every","lastRow","includes","remove","addEventListener","target","contains","replace"],"mappings":"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","file":"main.bf16b4e5.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst button = document.querySelector('button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst fieldRows = document.querySelectorAll('.field-row');\nconst score = document.querySelector('.game-score');\nconst fieldSize = 4;\nlet gameScore = 0;\n\nlet gameField = [\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0],\n  [0, 0, 0, 0]];\n\nbutton.addEventListener('click', clickEvent => {\n  const target = clickEvent.target;\n\n  document.addEventListener('keydown', move);\n\n  if (target.classList.contains('start')) {\n    button.classList.replace('start', 'restart');\n    button.innerText = 'Restart';\n    messageStart.classList.add('hidden');\n    cellFilling();\n    render();\n    document.addEventListener('keydown', move);\n  } else {\n    restart();\n  }\n\n  cellFilling();\n  render();\n});\n\nfunction cellFilling() {\n  const [coordX, coordY] = emptyField();\n\n  gameField[coordX][coordY] = Math.random() < 0.9 ? 2 : 4;\n}\n\nfunction emptyField() {\n  const emptyCells = [];\n\n  gameField.forEach((row, rowIndex) =>\n    row.forEach((cell, columIndex) => {\n      if (cell === 0) {\n        emptyCells.push([rowIndex, columIndex]);\n      }\n    }\n    ));\n\n  return emptyCells[Math.floor(Math.random() * emptyCells.length)];\n}\n\nfunction render() {\n  gameField.forEach((row, rowIndex) =>\n    row.forEach((cell, columIndex) => {\n      const element = fieldRows[rowIndex].children[columIndex];\n\n      if (cell === 0) {\n        element.textContent = '';\n        element.className = 'field-cell';\n      } else {\n        element.textContent = cell;\n        element.className = `field-cell field-cell--${cell}`;\n      }\n    }));\n\n  score.innerText = gameScore;\n}\n\nfunction restart() {\n  gameScore = 0;\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  gameField = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]];\n};\n\nfunction move(clickEvent) {\n  let changed;\n\n  switch (clickEvent.key) {\n    case 'ArrowLeft':\n      changed = moveLeft();\n      break;\n\n    case 'ArrowRight':\n      changed = moveRight();\n      break;\n\n    case 'ArrowUp':\n      changed = moveUp();\n      break;\n\n    case 'ArrowDown':\n      changed = moveDown();\n      break;\n  }\n\n  if (checkWin()) {\n    win();\n  }\n\n  if (changed) {\n    cellFilling();\n    render();\n  }\n\n  if (check()) {\n    lose();\n  }\n}\n\nfunction slide(array, size) {\n  function filterEmpty(filterArrey) {\n    return filterArrey.filter(item => item !== 0);\n  }\n\n  let newArray = filterEmpty(array);\n\n  if (newArray.length > 0) {\n    for (let i = 0; i < newArray.length; i++) {\n      if (newArray[i] === newArray[i + 1]) {\n        newArray[i] *= 2;\n        newArray[i + 1] = 0;\n        gameScore += newArray[i];\n      }\n    }\n  }\n\n  newArray = filterEmpty(newArray);\n\n  while (newArray.length < size) {\n    newArray.push(0);\n  }\n\n  return newArray;\n}\n\nfunction slideLeft(arr) {\n  let isChanged = false;\n\n  for (let y = 0; y < fieldSize; y++) {\n    const oldArr = [...arr[y]];\n\n    arr[y] = slide(arr[y], fieldSize);\n    isChanged = isChanged || arr[y].join(',') !== oldArr.join(',');\n  }\n\n  return isChanged;\n}\n\nfunction reverse() {\n  gameField.forEach(row => row.reverse());\n}\n\nfunction swap(xCol, yCol, xRow, yRow) {\n  const temp = gameField[xCol][yCol];\n\n  gameField[xCol][yCol] = gameField[xRow][yRow];\n  gameField[xRow][yRow] = temp;\n}\n\nfunction rotateField() {\n  for (let x = 0; x < fieldSize; x++) {\n    for (let y = 0; y < x; y++) {\n      swap(x, y, y, x);\n    }\n  }\n}\n\nfunction moveLeft() {\n  return slideLeft(gameField);\n}\n\nfunction moveRight() {\n  reverse();\n\n  const changed = moveLeft();\n\n  reverse();\n\n  return changed;\n}\n\nfunction moveUp() {\n  rotateField();\n\n  const changed = moveLeft();\n\n  rotateField();\n\n  return changed;\n}\n\nfunction moveDown() {\n  rotateField();\n\n  const changed = moveRight();\n\n  rotateField();\n\n  return changed;\n}\n\nfunction check() {\n  if (!gameField.map(item =>\n    item.every(row => row !== 0)).every(item => item)) {\n    return false;\n  }\n\n  for (let x = 0; x < fieldSize - 1; x++) {\n    const lastRow = gameField[3][x];\n\n    if (lastRow !== 0 && lastRow === gameField[3][x + 1]) {\n      return false;\n    }\n\n    for (let y = 0; y < fieldSize; y++) {\n      const element = gameField[x][y];\n\n      if (element !== 0\n        && (element === gameField[x][y + 1]\n          || element === gameField[x + 1][y])) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction checkWin() {\n  for (const key of gameField) {\n    if (key.includes(2048)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nfunction lose() {\n  messageLose.classList.remove('hidden');\n}\n\nfunction win() {\n  messageWin.classList.remove('hidden');\n}\n"]}